// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  name     String?
  username String  @unique
  email    String  @unique
  avatar   String  @default("/defaultProfile.jpg")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Profile         Profile?
  friends         FriendList[]    @relation("friends")
  friendOf        FriendList[]    @relation("friendOf")
  sentRequest     FriendRequest[] @relation("sentRequest")
  receivedRequest FriendRequest[] @relation("receivedRequest")
}

model Profile {
  id Int @id @default(autoincrement())

  userId   Int      @unique
  bio      String?
  location String?
  public   Boolean? @default(false)
  cover    String?  @default("/defaultCover.png")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model FriendRequest {
  id Int @id @default(autoincrement())

  status     FriendRequestStatus @default(PENDING)
  senderId   Int
  receiverId Int
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  sender   User @relation("sentRequest", fields: [senderId], references: [id])
  receiver User @relation("receivedRequest", fields: [receiverId], references: [id])
}

model FriendList {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  friendId Int
  friend   User @relation("friends", fields: [friendId], references: [id], map: "friend_fk")

  friendOfId Int
  friendOf   User @relation("friendOf", fields: [friendOfId], references: [id], map: "friend_of_fk")
}

enum FriendRequestStatus {
  ACCEPTED
  UNACCEPTED
  PENDING
}
